#!/bin/bash

while [[ $# -gt 0 ]]; do
  case "$1" in
    -eval|--evaluate)
      EVAL_ARG="$2"
      shift 2
      ;;
    -o|--output)
      OUTPUT_ARG="$2"
      shift 2
      ;;
    *)
      TEXT_FILE_ARG="$1"
      shift
      ;;
  esac
done

if [[ -z "$EVAL_ARG" || -z "$OUTPUT_ARG" || -z "$TEXT_FILE_ARG" ]]; then
  echo "Usage: $0 -eval (lang) -o <output.wav> <input.txt>" >&2
  exit 1
fi

if [[ ! -f "$TEXT_FILE_ARG" ]]; then
    echo "Error: Input file not found: $TEXT_FILE_ARG" >&2
    exit 1
fi

# Extract language from --evaluate argument (e.g., (ja) -> ja)
lang=$(echo "$EVAL_ARG" | sed 's/[()]//g')
if [[ "$lang" != "ja" ]]; then
  lang="en"
fi

# Read the first line of the input text file
speech_text=$(head -n 1 "$TEXT_FILE_ARG")

# --- Cache processing ---

# Define and create cache directory
CACHE_DIR="${ROS_HOME:-$HOME/.ros}/gtts/cache"
mkdir -p "$CACHE_DIR"

# Calculate MD5 checksum of the input text file
# Use md5sum (Linux) or md5 (macOS)
if command -v md5sum &> /dev/null; then
    md5=$(md5sum "$TEXT_FILE_ARG" | awk '{print $1}')
else
    md5=$(md5 -q "$TEXT_FILE_ARG")
fi


# Build cache file path
CACHE_FILENAME="$CACHE_DIR/${md5}--${lang}.wav"

# Check if cached version exists
if [[ -f "$CACHE_FILENAME" ]]; then
  echo "[Text2Wave] Using cached sound file ($CACHE_FILENAME) for $speech_text"
  cp "$CACHE_FILENAME" "$OUTPUT_ARG"
  exit 0
fi

echo "[Text2Wave] Requesting speech synthesis: $speech_text"

# Build JSON payload
# Use printf to safely create JSON string
json_payload=$(printf '{"text": "%s", "lang": "%s"}' "$speech_text" "$lang")

# Call speech synthesis API and save output wav file
# Use --fail to ensure script exits with error if server returns error (4xx or 5xx)
curl -X POST "http://localhost:8000/synthesize" \
     -H "Content-Type: application/json" \
     -d "$json_payload" \
     --silent \
     --fail \
     -o "$OUTPUT_ARG"

# Check if curl command succeeded and output file was created
if [[ $? -ne 0 || ! -s "$OUTPUT_ARG" ]]; then
    echo "[Text2Wave] Error: Speech synthesis from server failed." >&2
    # Clean up empty output file
    rm -f "$OUTPUT_ARG"
    exit 1
fi


# --- Update cache ---
TEXT_CACHE_FILENAME="${CACHE_FILENAME%.wav}.txt"
echo "[Text2Wave] Cache saved to: $CACHE_FILENAME"
cp "$TEXT_FILE_ARG" "$TEXT_CACHE_FILENAME"
cp "$OUTPUT_ARG" "$CACHE_FILENAME"

echo "[Text2Wave] Speech synthesis completed. Output: $OUTPUT_ARG"
exit 0
