<launch>

  <arg name="raw_audio_topic" default="/audio" doc="Name of audio topic captured from microphone" />
  <arg name="dummy_audio_topic" default="/dummy_audio" doc="Dummy audio" />
  <arg name="audio_topic" default="/input_audio" doc="Name of audio topic captured from microphone" />
  <arg name="device" doc="Card and device number of microphone (e.g. hw:0,0). you can check card number and device number by '$ aplay -l' or '$ bluealsa-aplay -l', then uses hw:[card number],[device number]. For bluetooth speaker, specify bluealsa:DEV=MAC_ADDRESS,PROFILE=a2dp" />
  <arg name="sound_play_respawn" default="true" />
  <arg name="namespace" default="" />

  <group if="$(eval len(arg('namespace')) > 0)" ns="$(arg namespace)" >
    <node name="openjtalk_tts_server"
          pkg="riberry_startup" type="openjtalk_tts_server.py" >
    </node>

    <node name="sound_play_jp"
          pkg="sound_play" type="soundplay_node.py"
          respawn="$(arg sound_play_respawn)"
          output="screen" >
      <remap from="robotsound" to="robotsound_jp"/>
      <remap from="sound_play" to="robotsound_jp"/>
      <env name="PATH" value="$(find riberry_startup)/bin/openjtalk:$(env PATH)" />
      <env name="PYTHONIOENCODING" value="utf-8" />
      <rosparam subst_value="true" >
        device: $(arg device)
      </rosparam>
    </node>

    <group ns="sound_play_jp" >
      <node name="is_speaking"
            pkg="sound_play" type="is_speaking.py"
            respawn="true">
        <remap from="~robotsound" to="/$(arg namespace)/robotsound_jp/status" />
        <remap from="~output/is_speaking" to="/$(arg namespace)/is_speaking" />
      </node>
    </group>

    <node name="input_audio_mux"
          pkg="topic_tools" type="mux"
          respawn="true"
	        args="/$(arg namespace)/$(arg audio_topic) /$(arg namespace)/$(arg raw_audio_topic) /$(arg namespace)/$(arg dummy_audio_topic)">
      <remap from="mux" to="input_audio_mux" />
    </node>

    <node name="input_audio_selector"
          pkg="riberry_startup" type="mux_selector.py"
	        respawn="true"
	        args="/$(arg namespace)/is_speaking 'm.data is False' /$(arg namespace)/$(arg raw_audio_topic) /$(arg namespace)/is_speaking 'm.data is True' /$(arg namespace)/$(arg dummy_audio_topic)">
      <remap from="mux" to="input_audio_mux" />
      <param name="default_select" value="/$(arg namespace)/$(arg dummy_audio_topic)" />
      <param name="wait" value="true" />
    </node>
  </group>

  <group unless="$(eval len(arg('namespace')) > 0)">
    <node name="openjtalk_tts_server"
          pkg="riberry_startup" type="openjtalk_tts_server.py" >
    </node>

    <node name="sound_play_jp"
          pkg="sound_play" type="soundplay_node.py"
          respawn="$(arg sound_play_respawn)"
          output="screen" >
      <remap from="robotsound" to="robotsound_jp"/>
      <remap from="sound_play" to="robotsound_jp"/>
      <env name="PATH" value="$(find riberry_startup)/bin/openjtalk:$(env PATH)" />
      <env name="PYTHONIOENCODING" value="utf-8" />
      <rosparam subst_value="true" >
        device: $(arg device)
      </rosparam>
    </node>

    <group ns="sound_play_jp" >
      <node name="is_speaking"
            pkg="sound_play" type="is_speaking.py"
            respawn="true">
        <remap from="~robotsound" to="/robotsound_jp/status" />
        <remap from="~output/is_speaking" to="/is_speaking" />
      </node>
    </group>

    <node name="input_audio_mux"
          pkg="topic_tools" type="mux"
          respawn="true"
	        args="$(arg audio_topic) $(arg raw_audio_topic) $(arg dummy_audio_topic)">
      <remap from="mux" to="input_audio_mux" />
    </node>

    <node name="input_audio_selector"
          pkg="riberry_startup" type="mux_selector.py"
	        respawn="true"
	        args="/is_speaking 'm.data is False' $(arg raw_audio_topic) /is_speaking 'm.data is True' $(arg dummy_audio_topic)">
      <remap from="mux" to="input_audio_mux" />
      <param name="default_select" value="$(arg dummy_audio_topic)" />
      <param name="wait" value="true" />
    </node>
  </group>

</launch>
