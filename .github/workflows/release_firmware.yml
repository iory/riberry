name: Build and Release Multiple Firmwares

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  non_release_firmware:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - project_dir: firmware/atom_echo_i2c_audio
            env_option: ""
          - project_dir: firmware/esp_now_pairing
            env_option: "-e main"
          - project_dir: firmware/esp_now_pairing
            env_option: "-e secondary"
          - project_dir: firmware/esp_now_pairing
            env_option: "-e esp_now_init_deinit"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all tags if needed

      - name: Cache PlatformIO dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio
            ~/.cache/pip
          key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-pio-

      - name: Cache PlatformIO build
        uses: actions/cache@v4
        with:
          path: ~/.cache/pio
          key: ${{ runner.os }}-pio-build-${{ hashFiles('firmware/atom_s3_i2c_display/src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-pio-build-
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install PlatformIO
        run: pip install --upgrade platformio

      - name: Build PlatformIO Project
        run: pio run -d ${{ matrix.project_dir }} ${{ matrix.env_option }}

  ##########################################################
  # Job 1: Build all firmware variations (matrix)
  ##########################################################
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board: [m5stack-atoms3, m5stack-basic]
        rotation: [0, 1, 2, 3]
        grove: [0, 1]
        exclude:
          # We exclude m5stack-basic with grove=1
          - board: m5stack-basic
            grove: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all tags if needed

      - name: Cache PlatformIO dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio
            ~/.cache/pip
          key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-pio-

      - name: Cache PlatformIO build
        uses: actions/cache@v4
        with:
          path: ~/.cache/pio
          key: ${{ runner.os }}-pio-build-${{ hashFiles('firmware/atom_s3_i2c_display/src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-pio-build-
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install PlatformIO
        run: pip install --upgrade platformio

      - name: Build firmware
        run: |
          echo "Board: ${{ matrix.board }}"
          echo "Rotation: ${{ matrix.rotation }}"
          echo "Grove: ${{ matrix.grove }}"

          # Pass LCD_ROTATION and USE_GROVE as environment variables to PlatformIO
          LCD_ROTATION=${{ matrix.rotation }} \
          USE_GROVE=${{ matrix.grove }} \
            pio run -d firmware/atom_s3_i2c_display -e ${{ matrix.board }}

          # Rename the output to include board, rotation, and grove
          BUILD_DIR="firmware/atom_s3_i2c_display/.pio/build/${{ matrix.board }}"
          OUTPUT_NAME="${{ matrix.board }}-lcd${{ matrix.rotation }}-grove${{ matrix.grove }}.bin"
          OUTPUT_ELF_NAME="${{ matrix.board }}-lcd${{ matrix.rotation }}-grove${{ matrix.grove }}.elf"
          BOOTLOADER_NAME="${{ matrix.board }}-bootloader.bin"
          PARTITIONS_NAME="${{ matrix.board }}-partitions.bin"

          mv "$BUILD_DIR/firmware.bin" "$BUILD_DIR/$OUTPUT_NAME"
          mv "$BUILD_DIR/firmware.elf" "$BUILD_DIR/$OUTPUT_ELF_NAME"
          cp "$BUILD_DIR/bootloader.bin" "$BUILD_DIR/$BOOTLOADER_NAME"
          cp "$BUILD_DIR/partitions.bin" "$BUILD_DIR/$PARTITIONS_NAME"

      - name: Upload artifacts (.bin and .elf)
        if: github.event_name != 'pull_request' # Execute not in case of pull_request
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.board }}-rot${{ matrix.rotation }}-grove${{ matrix.grove }}
          path: |
            firmware/atom_s3_i2c_display/.pio/build/${{ matrix.board }}/${{ matrix.board }}-lcd${{ matrix.rotation }}-grove${{ matrix.grove }}.bin
            firmware/atom_s3_i2c_display/.pio/build/${{ matrix.board }}/${{ matrix.board }}-lcd${{ matrix.rotation }}-grove${{ matrix.grove }}.elf
            firmware/atom_s3_i2c_display/.pio/build/${{ matrix.board }}/${{ matrix.board }}-bootloader.bin
            firmware/atom_s3_i2c_display/.pio/build/${{ matrix.board }}/${{ matrix.board }}-partitions.bin

  ##########################################################
  # Job 2: Create release (one time), expose "upload_url"
  ##########################################################
  release:
    # Wait for "build" job to finish
    needs: build
    if: github.event_name != 'pull_request' # Execute not in case of pull_request
    runs-on: ubuntu-latest

    outputs:
      # We'll publish the upload_url so the next job can see it
      upload_url: ${{ steps.set_release_url.outputs.upload_url }}
      tag_name: ${{ steps.short_sha.outputs.short_sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get-tag-name
        run: |
          echo "Available tags:"
          git tag --list
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No tags found, setting default tag"
            LATEST_TAG="v0.0.0"
          else
            LATEST_TAG=$(echo "$LATEST_TAG" | sed 's/^\(v[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/')
          fi
          echo "tag-name=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Calculate shortened SHA
        id: short_sha
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TAGGED_SHA="${{ steps.get-tag-name.outputs.tag-name }}-${SHORT_SHA}"
          echo "short_sha=$TAGGED_SHA" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.short_sha.outputs.short_sha }}
          release_name: Release ${{ steps.short_sha.outputs.short_sha }}
          draft: false
          prerelease: false

      - name: Set release upload URL
        id: set_release_url
        run: |
          # Put the create_release output into a job-level output
          echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT

  ######################################################
  # Job 3: Use the same matrix to upload each firmware
  ######################################################
  upload:
    needs: [build, release]
    if: github.event_name != 'pull_request' # Execute not in case of pull_request
    runs-on: ubuntu-latest

    # Reuse the same matrix to avoid enumerating all combos by hand
    strategy:
      fail-fast: false
      matrix:
        board: [m5stack-atoms3, m5stack-basic]
        rotation: [0, 1, 2, 3]
        grove: [0, 1]
        exclude:
          - board: m5stack-basic
            grove: 1

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: all_firmwares

      - name: Debug directory structure
        run: |
          ls -R all_firmwares

      - name: Upload to release (.bin file)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: all_firmwares/firmware-${{ matrix.board }}-rot${{ matrix.rotation }}-grove${{ matrix.grove }}/${{ matrix.board }}-lcd${{ matrix.rotation }}-grove${{ matrix.grove }}.bin
          asset_name: ${{ matrix.board }}-lcd${{ matrix.rotation }}-grove${{ matrix.grove }}.bin
          asset_content_type: application/octet-stream

      - name: Upload to release (.elf file)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: all_firmwares/firmware-${{ matrix.board }}-rot${{ matrix.rotation }}-grove${{ matrix.grove }}/${{ matrix.board }}-lcd${{ matrix.rotation }}-grove${{ matrix.grove }}.elf
          asset_name: ${{ matrix.board }}-lcd${{ matrix.rotation }}-grove${{ matrix.grove }}.elf
          asset_content_type: application/octet-stream

      - name: Upload to release (bootloader.bin)
        uses: actions/upload-release-asset@v1
        # another matrix job might upload this file, so we allow it to fail
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: all_firmwares/firmware-${{ matrix.board }}-rot${{ matrix.rotation }}-grove${{ matrix.grove }}/${{ matrix.board }}-bootloader.bin
          asset_name: ${{ matrix.board }}-bootloader.bin
          asset_content_type: application/octet-stream

      - name: Upload to release (partitions.bin)
        uses: actions/upload-release-asset@v1
        # another matrix job might upload this file, so we allow it to fail
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: all_firmwares/firmware-${{ matrix.board }}-rot${{ matrix.rotation }}-grove${{ matrix.grove }}/${{ matrix.board }}-partitions.bin
          asset_name: ${{ matrix.board }}-partitions.bin
          asset_content_type: application/octet-stream

  deploy-to-pages:
    needs: [build, release]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout gh-pages branch with full history
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install git-filter-repo
        run: pip install git-filter-repo

      - name: Remove old firmware commits from Git history
        run: |
          echo "Removing all commits related to the 'firmware/' directory from history..."
          git filter-repo --path firmware --invert-paths --force

      - name: Download all firmware artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts_to_deploy

      - name: Organize and deploy latest files
        run: |
          echo "Removing old firmware from working directory to ensure a clean state..."
          rm -rf firmware

          DEPLOY_DIR="firmware/latest"

          echo "Deploying latest firmware to $DEPLOY_DIR"
          mkdir -p "$DEPLOY_DIR"

          find artifacts_to_deploy/ -name "*.bin" -exec mv {} "$DEPLOY_DIR/" \;

          echo "Files to be deployed:"
          ls -lR "$DEPLOY_DIR"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add firmware/

          if [ -n "$(git status --porcelain)" ]; then
            TAG_NAME="${{ needs.release.outputs.tag_name }}"

            echo "Committing latest firmware files..."
            git commit -m "Deploy latest firmware (from release $TAG_NAME)"

            echo "Re-configuring remote URL for push..."
            git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

            echo "Pushing changes to gh-pages..."
            git push --force origin gh-pages
          else
            echo "No new firmware to deploy."
          fi
